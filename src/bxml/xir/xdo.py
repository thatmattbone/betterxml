"""
xdo.py: XML/XIR Data Objects)

XIRDataObject provides support for encoding XML events (often generated by a SAX parser but not
limited to this approach) in a lossless and portable representation.

XIRReader provides support for reading XIRDataObjects from a stream.
"""

import base64
import pprint
import unittest

class XIRDataObject(object):
    def __init__(self, type='nop', subtype='unused'):
        self.data  = { 'xir.type' : ('verbatim', type),
                       'xir.subtype' : ('verbatim', subtype) }
        
    def parse(self, recordData):
        for field in recordData:
            try:
                eqPos = field.find('=')
                var = field[0:eqPos]
                value = field[eqPos+1:]
                (var, type) = var.split(':')
            except:
                print "XIR text", field
                raise "XIR fields must be in the form var:type=value"
            self.data[var] = (type, value)
            
    def set_verbatim(self, key, value):
        if type(value) != type('') and type(value) != type(u''):
            value = str(value)
        if key.startswith('xir.'):
            raise "no key may begin with 'xir.' prefix"
        self.data[key] = ('verbatim', value)
        
    def set_base64(self, key, value):
        if type(value) != type('') and type(value) != type(u''):
            value = str(value)
        base64_value = base64.encodestring(value)
        base64_value = base64_value.replace('\n','')
        base64_value = base64_value.replace('\r','')
        self.data[key] = ('base64', base64_value)
    
    def get_encoding(self, key):
        (encoding, value) = self.data[key]
        return encoding

    def get_value(self, key):
        (encoding, value) = self.data[key]
        if encoding == 'verbatim':
            return value
        elif encoding == 'base64':
            return base64.decodestring(value)
        else:
            raise "Illegal encoding %s" % encoding
    
    def get_type(self):
        return self.get_value('xir.type')
    
    def get_subtype(self):
        return self.get_value('xir.subtype')
    
    def __str__(self):
        text = ''
        xir_items = [ (key, value) for (key, value) in self.data.items() if key.startswith('xir.') ]

        other_items = [ (key, value) for (key, value) in self.data.items() if not key.startswith('xir.') ]

        all_items = xir_items + other_items

        for (key, value) in all_items:
            text += '%s:%s=%s\n' % (key, value[0], value[1].strip()) 
        return text

class XIRReader(object):
    def __init__(self, stream):
        self.stream = stream
    
    def getNextRecord(self):
        record = []
        eof = False
        while True:
            text = self.stream.readline()
            # Was EOF reached?
            # Python uses empty string as EOF (not a good thing).
            if len(text) == 0:
                eof = True
                break            
            text = text.strip()
            if len(text) == 0:
                break
            if text[0] == '#':
                continue
            record.append(text)
        if len(record) == 0 and eof:
            return None
        else:
            xir = XIRDataObject(type='junk')
            xir.parse(record)
            return xir 
    
class XIRDataObjectTest(unittest.TestCase):

    def testConstructor(self):
        xdo = XIRDataObject('document')
        self.assertEquals(xdo.get_value('xir.type'), 'document')

    def testVerbatim(self):
        xdo = XIRDataObject('document')
        xdo.set_verbatim('x', 25) 
        xdo.set_verbatim('y', 'y text')
        self.assertEquals( xdo.get_encoding('x'), 'verbatim')
        self.assertEquals( xdo.get_encoding('y'), 'verbatim')
        self.assertEquals( xdo.get_value('x'), '25')
        self.assertEquals( xdo.get_value('y'), 'y text')

    def testBase64(self):
        xdo = XIRDataObject('document')
        xdo.set_base64('x', 25) 
        xdo.set_base64('y', 'y text')
        self.assertEquals( xdo.get_encoding('x'), 'base64')
        self.assertEquals( xdo.get_encoding('y'), 'base64')
        self.assertEquals( xdo.get_value('x'), '25')
        self.assertEquals( xdo.get_value('y'), 'y text')

    def testMixItUp(self):
        xdo = XIRDataObject('document')
        xdo.set_verbatim('a', 'a text')
        xdo.set_verbatim('b', 100)
        xdo.set_base64('x', 25) 
        xdo.set_base64('y', 'y text')
        self.assertEquals( xdo.get_encoding('x'), 'base64')
        self.assertEquals( xdo.get_encoding('y'), 'base64')
        self.assertEquals( xdo.get_value('x'), '25')
        self.assertEquals( xdo.get_value('y'), 'y text')
        self.assertEquals( xdo.get_encoding('a'), 'verbatim')
        self.assertEquals( xdo.get_encoding('b'), 'verbatim')
        self.assertEquals( xdo.get_value('a'), 'a text')
        self.assertEquals( xdo.get_value('b'), '100')
        print str(xdo)

if __name__ == '__main__':
    unittest.main()
